{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Disp Moviles\\\\Movies\\\\src\\\\utils\\\\loadAssets.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { AppLoading } from \"expo\";\nimport { Asset } from \"expo-asset\";\nimport * as Font from \"expo-font\";\n\nvar usePromiseAll = function usePromiseAll(promises, cb) {\n  return useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Promise.all(promises));\n\n            case 2:\n              cb();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  });\n};\n\nvar useLoadAssets = function useLoadAssets(assets, fonts) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  usePromiseAll([Font.loadAsync(fonts)].concat(_toConsumableArray(assets.map(function (asset) {\n    return Asset.loadAsync(asset);\n  }))), function () {\n    return setReady(true);\n  });\n  return ready;\n};\n\nvar LoadAssets = function LoadAssets(_ref) {\n  var assets = _ref.assets,\n      fonts = _ref.fonts,\n      children = _ref.children;\n  var ready = useLoadAssets(assets || [], fonts || {});\n\n  if (!ready) {\n    return React.createElement(AppLoading, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(React.Fragment, null, children);\n};\n\nexport default LoadAssets;","map":{"version":3,"sources":["D:/Disp Moviles/Movies/src/utils/loadAssets.js"],"names":["React","useEffect","useState","AppLoading","Asset","Font","usePromiseAll","promises","cb","Promise","all","useLoadAssets","assets","fonts","ready","setReady","loadAsync","map","asset","LoadAssets","children"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,EAAX;AAAA,SACpBP,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACOQ,OAAO,CAACC,GAAR,CAAYH,QAAZ,CADP;;AAAA;AAECC,cAAAA,EAAE;;AAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,CADW;AAAA,CAAtB;;AAQA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAASC,KAAT,EAAmB;AAAA,kBACbX,QAAQ,CAAC,KAAD,CADK;AAAA;AAAA,MAChCY,KADgC;AAAA,MACzBC,QADyB;;AAEvCT,EAAAA,aAAa,EACVD,IAAI,CAACW,SAAL,CAAeH,KAAf,CADU,4BACgBD,MAAM,CAACK,GAAP,CAAW,UAACC,KAAD;AAAA,WAAWd,KAAK,CAACY,SAAN,CAAgBE,KAAhB,CAAX;AAAA,GAAX,CADhB,IAEX;AAAA,WAAMH,QAAQ,CAAC,IAAD,CAAd;AAAA,GAFW,CAAb;AAKA,SAAOD,KAAP;AACD,CARD;;AAUA,IAAMK,UAAU,GAAG,SAAbA,UAAa,OAAiC;AAAA,MAA9BP,MAA8B,QAA9BA,MAA8B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfO,QAAe,QAAfA,QAAe;AAClD,MAAMN,KAAK,GAAGH,aAAa,CAACC,MAAM,IAAI,EAAX,EAAeC,KAAK,IAAI,EAAxB,CAA3B;;AACA,MAAI,CAACC,KAAL,EAAY;AACV,WAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SAAO,0CAAGM,QAAH,CAAP;AACD,CAND;;AAQA,eAAeD,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AppLoading } from \"expo\";\nimport { Asset } from \"expo-asset\";\nimport * as Font from \"expo-font\";\n\nconst usePromiseAll = (promises, cb) =>\n  useEffect(() => {\n    (async () => {\n      await Promise.all(promises);\n      cb();\n    })();\n  });\n\nconst useLoadAssets = (assets, fonts) => {\n  const [ready, setReady] = useState(false);\n  usePromiseAll(\n    [Font.loadAsync(fonts), ...assets.map((asset) => Asset.loadAsync(asset))],\n    () => setReady(true)\n  );\n\n  return ready;\n};\n\nconst LoadAssets = ({ assets, fonts, children }) => {\n  const ready = useLoadAssets(assets || [], fonts || {});\n  if (!ready) {\n    return <AppLoading />;\n  }\n  return <>{children}</>;\n};\n\nexport default LoadAssets;\n"]},"metadata":{},"sourceType":"module"}