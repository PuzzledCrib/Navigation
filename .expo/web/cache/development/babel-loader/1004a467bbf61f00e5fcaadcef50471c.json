{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Disp Moviles\\\\Movies\\\\src\\\\utils\\\\loadAssets.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\n\nvar usePromiseAll = function usePromiseAll(promises, cb) {\n  return useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Promise.all(promises));\n\n            case 2:\n              cb();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  });\n};\n\nvar useLoadAssets = function useLoadAssets(assets, fonts) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  usePromiseAll([Font.loadAsync(fonts)].concat(_toConsumableArray(assets.map(function (asset) {\n    return Asset.loadAsync(asset);\n  }))), function () {\n    return setReady(true);\n  });\n  return ready;\n};\n\nvar LoadAssets = function LoadAssets(_ref) {\n  var assets = _ref.assets,\n      fonts = _ref.fonts,\n      children = _ref.children;\n  var ready = useLoadAssets(assets || [], fonts || {});\n\n  if (!ready) {\n    return React.createElement(AppLoading, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 10\n      }\n    });\n  }\n\n  return React.createElement(React.Fragment, null, children);\n};\n\nexport default LoadAssets;","map":{"version":3,"sources":["D:/Disp Moviles/Movies/src/utils/loadAssets.js"],"names":["React","useEffect","useState","AppLoading","Asset","Font","usePromiseAll","promises","cb","Promise","all","useLoadAssets","assets","fonts","ready","setReady","loadAsync","map","asset","LoadAssets","children"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,EAAX;AAAA,SACrBP,SAAS,CAAC,YAAM;AACf,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACMQ,OAAO,CAACC,GAAR,CAAYH,QAAZ,CADN;;AAAA;AAEAC,cAAAA,EAAE;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAIA,GALQ,CADY;AAAA,CAAtB;;AAQA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAASC,KAAT,EAAmB;AAAA,kBACdX,QAAQ,CAAC,KAAD,CADM;AAAA;AAAA,MACjCY,KADiC;AAAA,MAC1BC,QAD0B;;AAExCT,EAAAA,aAAa,EAAED,IAAI,CAACW,SAAL,CAAeH,KAAf,CAAF,4BAA4BD,MAAM,CAACK,GAAP,CAAW,UAACC,KAAD;AAAA,WAAWd,KAAK,CAACY,SAAN,CAAgBE,KAAhB,CAAX;AAAA,GAAX,CAA5B,IAA4E;AAAA,WACxFH,QAAQ,CAAC,IAAD,CADgF;AAAA,GAA5E,CAAb;AAIA,SAAOD,KAAP;AACA,CAPD;;AASA,IAAMK,UAAU,GAAG,SAAbA,UAAa,OAAiC;AAAA,MAA9BP,MAA8B,QAA9BA,MAA8B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfO,QAAe,QAAfA,QAAe;AACnD,MAAMN,KAAK,GAAGH,aAAa,CAACC,MAAM,IAAI,EAAX,EAAeC,KAAK,IAAI,EAAxB,CAA3B;;AACA,MAAI,CAACC,KAAL,EAAY;AACX,WAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACA;;AACD,SAAO,0CAAGM,QAAH,CAAP;AACA,CAND;;AAQA,eAAeD,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport * as Font from 'expo-font';\n\nconst usePromiseAll = (promises, cb) =>\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tawait Promise.all(promises);\n\t\t\tcb();\n\t\t})();\n\t});\n\nconst useLoadAssets = (assets, fonts) => {\n\tconst [ready, setReady] = useState(false);\n\tusePromiseAll([Font.loadAsync(fonts), ...assets.map((asset) => Asset.loadAsync(asset))], () =>\n\t\tsetReady(true)\n\t);\n\n\treturn ready;\n};\n\nconst LoadAssets = ({ assets, fonts, children }) => {\n\tconst ready = useLoadAssets(assets || [], fonts || {});\n\tif (!ready) {\n\t\treturn <AppLoading />;\n\t}\n\treturn <>{children}</>;\n};\n\nexport default LoadAssets;"]},"metadata":{},"sourceType":"module"}